#!/usr/bin/env python3
# WIP
# Copyright (c) 2024 Jovan Lanik

import argparse
import re
import os

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            prog="bake.py",
            description="Bake file contents to C variable",
            epilog="Report bugs to <jox969@gmail.com>.",
    )
    parser.add_argument("input", help="input file")
    parser.add_argument("-o", "--output", help="output file", required=True)
    parser.add_argument("-c", "--comment", help="comment", required=False)
    parser.add_argument("-s", "--storage", help="storage class specifier", required=False)
    parser.add_argument("-t", "--type", help="type specifier", required=False)
    parser.add_argument("-n", "--name", help="variable name", required=False)
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--null', help="null terminate", default=True, action='store_true')
    group.add_argument('--no-null', help="don't null terminate", dest='null', action='store_false')
    args = parser.parse_args()

    if args.comment is None:
        args.comment = "// This file is generated by bake.py\n\n"

    if not args.type:
        args.type = "const unsigned char"

    if not args.name:
        args.name = "_binary_"
        args.name += re.sub("[^a-zA-Z0-9]", "_", os.path.basename(args.input))
        args.name += "_start"

    with open(args.output, "w") as output:
        output.write(args.comment)
        if args.storage:
            output.write(args.storage + " ")

        output.write("%s %s[] = {\n" % (args.type, args.name))
        with open(args.input, "rb") as input:
            chars = input.read(16)
            while chars:
                output.write("\t")
                for char in chars:
                    output.write("0x%02x, " % char)
                output.write("\n")
                chars = input.read(16)

        if args.null:
            output.write("\t0x00,\n")
        output.write("};\n\n")
